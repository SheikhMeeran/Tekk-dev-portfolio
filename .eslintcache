[{"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\index.js":"1","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\App.js":"2","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\scripts\\ScrollToTop.js":"3","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\LandingPage.js":"4","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Software.js":"5","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Services.js":"6","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\MobileApp.js":"7","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Websites.js":"8","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\About.js":"9","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Revolution.js":"10","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Contact.js":"11","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Estimate.js":"12","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\ui\\Theme.js":"13","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\ui\\Header.js":"14","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\ui\\Footer.js":"15","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\animations\\landinganimation\\data.js":"16","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\animations\\documentsAnimation\\data.js":"17","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\animations\\uxAnimation\\data.js":"18","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\ui\\ButtonArrow.js":"19","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\ui\\CallToAction.js":"20","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\svgToReact\\MobileFooterAdornment.js":"21","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\svgToReact\\FooterAdornment.js":"22","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\TechStack.jsx":"23","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Testimonials.jsx":"24"},{"size":154,"mtime":1749659467446,"results":"25","hashOfConfig":"26"},{"size":4774,"mtime":1749805542440,"results":"27","hashOfConfig":"26"},{"size":278,"mtime":1749659467447,"results":"28","hashOfConfig":"26"},{"size":4849,"mtime":1749805542446,"results":"29","hashOfConfig":"26"},{"size":24110,"mtime":1749805542443,"results":"30","hashOfConfig":"26"},{"size":8067,"mtime":1749805542443,"results":"31","hashOfConfig":"26"},{"size":9836,"mtime":1749805542446,"results":"32","hashOfConfig":"26"},{"size":8413,"mtime":1749805542441,"results":"33","hashOfConfig":"26"},{"size":9090,"mtime":1749805542450,"results":"34","hashOfConfig":"26"},{"size":27281,"mtime":1749805542445,"results":"35","hashOfConfig":"26"},{"size":24157,"mtime":1749805542449,"results":"36","hashOfConfig":"26"},{"size":40588,"mtime":1749805542448,"results":"37","hashOfConfig":"26"},{"size":2509,"mtime":1749805542456,"results":"38","hashOfConfig":"26"},{"size":14581,"mtime":1749806132249,"results":"39","hashOfConfig":"26"},{"size":9253,"mtime":1749805542451,"results":"40","hashOfConfig":"26"},{"size":4148,"mtime":1749659467322,"results":"41","hashOfConfig":"26"},{"size":2883,"mtime":1749659467317,"results":"42","hashOfConfig":"26"},{"size":26366,"mtime":1749659467330,"results":"43","hashOfConfig":"26"},{"size":429,"mtime":1749659467442,"results":"44","hashOfConfig":"26"},{"size":4703,"mtime":1749805542459,"results":"45","hashOfConfig":"26"},{"size":1232,"mtime":1749659467448,"results":"46","hashOfConfig":"26"},{"size":1469,"mtime":1749797929016,"results":"47","hashOfConfig":"26"},{"size":4948,"mtime":1749800954579,"results":"48","hashOfConfig":"26"},{"size":6267,"mtime":1749616300002,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1moz9ft",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\index.js",[],["103","104"],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\App.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\scripts\\ScrollToTop.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\LandingPage.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Software.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Services.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\MobileApp.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Websites.js",["105","106"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles, useTheme } from \"@mui/material/styles\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Hidden from \"@mui/material/Hidden\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport backArrow from \"../assets/backArrow.svg\";\r\nimport forwardArrow from \"../assets/forwardArrow.svg\";\r\nimport CallToAction from \"./ui/CallToAction\";\r\nimport digitalImage from \"../assets/Digital Transformation .jpg\";\r\nimport TechStack from \"./TechStack\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heading: {\r\n    maxWidth: \"100em\",\r\n  },\r\n  arrowContainer: {\r\n    marginTop: \"0.5em\",\r\n  },\r\n  arrowIcons: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  rowContainer: {\r\n    paddingLeft: \"5em\",\r\n    paddingRight: \"5em\",\r\n    marginBottom: \"5em\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      paddingLeft: \"1.5em\",\r\n      paddingRight: \"1.5em\",\r\n    },\r\n  },\r\n  image: {\r\n    width: \"75%\",\r\n    height: \"45%\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      maxWidth: \"20em\",\r\n      marginTop: \"2em\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Websites = (props) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const medium = useMediaQuery(theme.breakpoints.down(\"md\"));\r\n  const smaller = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n\r\n  return (\r\n    <Grid container direction=\"column\">\r\n      {/* Navigation Arrows */}\r\n      <Grid\r\n        item\r\n        container\r\n        direction=\"row\"\r\n        className={classes.rowContainer}\r\n        justify=\"center\"\r\n      >\r\n        <Hidden smDown>\r\n          <Grid item className={classes.arrowContainer} style={{ marginRight: \"2em\" }}>\r\n            <IconButton\r\n              className={classes.arrowIcons}\r\n              component={Link}\r\n              to=\"/mobileapps\"\r\n              onClick={() => {\r\n                props.setValue(1);\r\n                props.setSelected(1);\r\n              }}\r\n            >\r\n              <img src={backArrow} alt=\"Back to Mobile App Development Page\" />\r\n            </IconButton>\r\n          </Grid>\r\n        </Hidden>\r\n\r\n        <Hidden smDown>\r\n          <Grid item className={classes.arrowContainer}>\r\n            <IconButton\r\n              className={classes.arrowIcons}\r\n              component={Link}\r\n              to=\"/services\"\r\n              onClick={() => {\r\n                props.setValue(1);\r\n                props.setSelected(null);\r\n              }}\r\n            >\r\n              <img src={forwardArrow} alt=\"Forward to Services Page\" />\r\n            </IconButton>\r\n          </Grid>\r\n        </Hidden>\r\n      </Grid>\r\n\r\n      {/* Digital Transformation Section */}\r\n      <Grid\r\n        item\r\n        container\r\n        direction={smaller ? \"column\" : \"row\"}\r\n        alignItems=\"center\"\r\n        justify=\"space-between\"\r\n        className={classes.rowContainer}\r\n      >\r\n        <Grid item xs={12} md={12} className={classes.heading}>\r\n          <Typography\r\n            variant=\"h2\"\r\n            align={smaller ? \"center\" : \"left\"}\r\n            gutterBottom\r\n          >\r\n            2.\tSoftware Development\r\n          </Typography>\r\n          <Typography variant=\"body1\" paragraph>\r\n“Blend of Technology Diversity, Product Scalability, Innovative Design, Agile Development”          </Typography>\r\n          <Typography variant=\"body1\" paragraph>\r\n            At TekkDev, we offer in-house development services for businesses, startups, enterprises with a strong emphasis on business analysis, application design, robust database architecture ensured through complete end to end quality of the software. \r\n          </Typography>\r\n          <Typography variant=\"body1\" paragraph>\r\nOur Software Development Methodology operates on flexible, cost-effective engagement options, our cross-functional professionals can function as short- or long-term solutions for your development needs. Our development focus is to ensure the requirements are gathered, complete analysis is performed, scope is outlined, design is discussed and agreed with the client before development phase commences and all development is completed with unit testing, modular and integration testing before software development is marked completed and ready to be deployed on client site. All code is version controlled and secured.          </Typography>\r\n          <Typography variant=\"body1\" paragraph>\r\nOur experienced team with years of expertise on various verticals (Healthcare, NFT, Blockchain, CRM) with successful track record of completing large to mid-size software development projects as web application, healthcare enterprise applications, mobile app & digital footprint management. We are experts and specialize in           </Typography>\r\n          <Typography variant=\"body1\" paragraph>\r\nVertical-Healthcare           </Typography>\r\n          <Typography variant=\"body1\" paragraph>\r\nWe have in-house subject matter expert who has completed specialized projects  with experience to have developed, deployed, implemented healthcare applications in .Net, .NET MVC, Java, J2EE, for clients in USA, UAE, KSA, and Pakistan. The product included scalability for a wide variety of projects in Hospital information system, Dental Solutions, Practice Management Solutions, Ambulance Systems which were conceptulaized, designed, developed and deployed successfully. All applications developed were HIPAA compliant, built on best healthcare practices, paperless, modular, interoperable and incorporated with data standards (CPT, ICD-10, SNOWMED, LOINC, CDSS) using IHE protocols. All applications seamlessly interfaced with PACS, 3rd party LIMS as well as connecting directly with lab machines using HL7, FHIR standards.          </Typography>\r\n\r\n<Typography>Vertical-NFT</Typography>\r\n<Typography>We create customized NFT marketplaces, which are basically decentralized platforms. We create such platforms according to your business requirements, where you can create, buy, sell and store these NFTs. We focus on developing a marketplace that has a unique selling point, which can grow very quickly to form a crypto-community</Typography>\r\n\r\n        </Grid>\r\n\r\n\r\n\r\n        {/* <Grid item xs={12} md={6} container justify={smaller ? \"center\" : \"flex-end\"}>\r\n          <img\r\n            src={digitalImage}\r\n            alt=\"Digital Transformation Illustration\"\r\n            className={classes.image}\r\n          />\r\n        </Grid> */}\r\n        <TechStack/>\r\n<Typography>Our team specilaizes in building you the robust yet flexible architecture, where application development is supported though modular architecture and built on scalable microservices components.  Our purpose built, client specific architecture covers on-premise as well as deployment based on cloud architecture. Our team has deployed, managed and developed a large scale multi-tenant architectures in past.</Typography>\r\n\r\n      </Grid>\r\n\r\n\r\n\r\n     {/* <Grid\r\n  item\r\n  container\r\n  direction={smaller ? \"column\" : \"row\"}\r\n  alignItems=\"center\"\r\n  justify=\"space-between\"\r\n  className={classes.rowContainer}\r\n> */}\r\n  {/* Image on the left now */}\r\n  {/* <Grid item xs={12} md={6} container justify={smaller ? \"center\" : \"flex-start\"}>\r\n    <img\r\n      src={Cloud}\r\n      alt=\"Digital Transformation Illustration\"\r\n      className={classes.image}\r\n    />\r\n  </Grid>\r\n\r\n  {/* Text on the right */}\r\n  {/* <Grid item xs={12} md={6} className={classes.heading}>\r\n    <Typography\r\n      variant=\"h2\"\r\n      align={smaller ? \"center\" : \"left\"}\r\n      gutterBottom\r\n    >\r\n      Cloud Assessment \r\n    </Typography>\r\n    <Typography variant=\"body1\" paragraph>\r\n      ❖\tCloud based business over the years is now the preferred modality of hosting applications these days, but as maturity is in the process to be achieved. We “Do More”.\r\n    </Typography>\r\n    <Typography variant=\"body1\" paragraph>\r\n      ❖ Our Cloud Security Analysts perform complete, holistic mapping of your cloud architecture to prevent breaches, threats and ensure risks are mitigated.\r\n    </Typography>\r\n   \r\n  </Grid>\r\n</Grid> */} \r\n\r\n\r\n      {/* CTA */}\r\n      <Grid item>\r\n        <CallToAction\r\n          setValue={props.setValue}\r\n          setSelected={props.setSelected}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Websites;\r\n\r\n\r\n\r\n","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\About.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Revolution.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Contact.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Estimate.js",["107"],"import React, { useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport Lottie from \"react-lottie\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport check from \"../assets/check.svg\";\r\nimport send from \"../assets/send.svg\";\r\nimport software from \"../assets/software.svg\";\r\nimport mobile from \"../assets/mobile.svg\";\r\nimport website from \"../assets/website.svg\";\r\nimport websiteBlack from \"../assets/websiteBlack.svg\";\r\nimport backArrow from \"../assets/backArrow.svg\";\r\nimport forwardArrow from \"../assets/forwardArrow.svg\";\r\nimport backArrowDisabled from \"../assets/backArrowDisabled.svg\";\r\nimport forwardArrowDisabled from \"../assets/forwardArrowDisabled.svg\";\r\nimport camera from \"../assets/camera.svg\";\r\nimport upload from \"../assets/upload.svg\";\r\nimport person from \"../assets/person.svg\";\r\nimport persons from \"../assets/persons.svg\";\r\nimport people from \"../assets/people.svg\";\r\nimport info from \"../assets/info.svg\";\r\nimport bell from \"../assets/bell.svg\";\r\nimport users from \"../assets/users.svg\";\r\nimport iphone from \"../assets/iphone.svg\";\r\nimport gps from \"../assets/gps.svg\";\r\nimport customized from \"../assets/customized.svg\";\r\nimport data from \"../assets/data.svg\";\r\nimport android from \"../assets/android.svg\";\r\nimport biometrics from \"../assets/biometrics.svg\";\r\nimport globe from \"../assets/globe.svg\";\r\n\r\nimport estimateAnimation from \"../animations/estimateAnimation/data.json\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heading: {\r\n    paddingLeft: \"5em\",\r\n    paddingRight: \"5em\",\r\n    marginBottom: \"3em\",\r\n    marginTop: \"2em\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      paddingLeft: \"1.5em\",\r\n      paddingRight: \"1.5em\",\r\n      marginTop: \"1em\",\r\n      marginBottom: \"1em\",\r\n      textAlign: \"center\",\r\n    },\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      marginBottom: \"1.5em\",\r\n    },\r\n  },\r\n\r\n  icon: {\r\n    height: \"10em\",\r\n    width: \"10em\",\r\n  },\r\n  question: {\r\n    marginTop: \"5em\",\r\n    marginBottom: \"2em\",\r\n    marginLeft: \"1em\",\r\n    marginRight: \"1em\",\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      marginBottom: \"1.5em\",\r\n    },\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      marginTop: \"1em\",\r\n      marginBottom: \"1em\",\r\n    },\r\n  },\r\n  estimate: {\r\n    ...theme.typography.estimate,\r\n    borderRadius: \"30px\",\r\n    marginLeft: \"20px\",\r\n    marginRight: \"20px\",\r\n    height: \"45px\",\r\n    width: \"250px\",\r\n    marginTop: \"0.5rem\",\r\n    fontSize: \"1.35rem\",\r\n  },\r\n\r\n  placeRequest: {\r\n    ...theme.typography.estimate,\r\n    borderRadius: \"30px\",\r\n    marginLeft: \"20px\",\r\n    marginRight: \"20px\",\r\n    height: \"45px\",\r\n    width: \"200px\",\r\n    marginTop: \"0.5rem\",\r\n    fontSize: \"1.15rem\",\r\n  },\r\n  transparentOnHover: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  estimateModalHeading: {\r\n    paddingLeft: \"2em\",\r\n    paddingRight: \"2em\",\r\n    marginTop: \"2em\",\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n    textAlign: \"center\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      width: \"80%\",\r\n      marginLeft: \"2em\",\r\n      marginRight: \"2em\",\r\n    },\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      width: \"100%\",\r\n      marginLeft: 0,\r\n      marginRight: 0,\r\n      paddingLeft: 0,\r\n      paddingRight: 0,\r\n    },\r\n  },\r\n  message: {\r\n    border: `2px solid ${theme.palette.common.orange}`,\r\n    marginTop: \"4em\",\r\n    borderRadius: \"5px\",\r\n  },\r\n  specialText: {\r\n    fontFamily: \"Raleway\",\r\n    fontWeight: 700,\r\n    fontSize: \"1.5rem\",\r\n    color: theme.palette.common.orange,\r\n  },\r\n}));\r\n\r\nconst defaultQuestions = [\r\n  {\r\n    id: 1,\r\n    title: \"Which service are you interested in?\",\r\n    subtitle: null,\r\n    active: true,\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Software Development\",\r\n        subtitle: null,\r\n        icon: software,\r\n        iconAlt: \"three floating screens\",\r\n        selected: false,\r\n        cost: 0,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"App Development\",\r\n        subtitle: null,\r\n        icon: mobile,\r\n        iconAlt: \"phones and tablet ouline\",\r\n        selected: false,\r\n        cost: 0,\r\n      },\r\n      // {\r\n      //   id: 3,\r\n      //   title: \"Website Development\",\r\n      //   subtitle: null,\r\n      //   icon: website,\r\n      //   iconAlt: \"a computer screen outline\",\r\n      //   selected: false,\r\n      //   cost: 0,\r\n      // },\r\n    ],\r\n  },\r\n];\r\n\r\nconst softwareQuestions = [\r\n  { ...defaultQuestions[0], active: false },\r\n  {\r\n    id: 2,\r\n    title: \"Which platforms do you need supported?\",\r\n    subtitle: \"Select all that apply.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Web Application\",\r\n        subtitle: null,\r\n        icon: websiteBlack,\r\n        iconAlt: \"computer outline\",\r\n        selected: false,\r\n        cost: 2500,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"iOS Application\",\r\n        subtitle: null,\r\n        icon: iphone,\r\n        iconAlt: \"outline of iphone\",\r\n        selected: false,\r\n        cost: 3000,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"Android Application\",\r\n        subtitle: null,\r\n        icon: android,\r\n        iconAlt: \"outlines of android phone\",\r\n        selected: false,\r\n        cost: 3000,\r\n      },\r\n    ],\r\n    active: true,\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Which features do you expect to use?\",\r\n    subtitle: \"Select all that apply.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Photo/Video\",\r\n        subtitle: null,\r\n        icon: camera,\r\n        iconAlt: \"camera outline\",\r\n        selected: false,\r\n        cost: 500,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"GPS\",\r\n        subtitle: null,\r\n        icon: gps,\r\n        iconAlt: \"gps pin\",\r\n        selected: false,\r\n        cost: 2500,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"File Transfer\",\r\n        subtitle: null,\r\n        icon: upload,\r\n        iconAlt: \"outline of cloud with arrow pointing up\",\r\n        selected: false,\r\n        cost: 1000,\r\n      },\r\n    ],\r\n    active: false,\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"Which features do you expect to use?\",\r\n    subtitle: \"Select all that apply.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Users Authentication\",\r\n        subtitle: null,\r\n        icon: users,\r\n        iconAlt: \"outline of a person with a plus sign\",\r\n        selected: false,\r\n        cost: 500,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Biometrics\",\r\n        subtitle: null,\r\n        icon: biometrics,\r\n        iconAlt: \"fingerprint\",\r\n        selected: false,\r\n        cost: 750,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"Push Notifications\",\r\n        subtitle: null,\r\n        icon: bell,\r\n        iconAlt: \"outline of a bell\",\r\n        selected: false,\r\n        cost: 1500,\r\n      },\r\n    ],\r\n    active: false,\r\n  },\r\n  {\r\n    id: 5,\r\n    title: \"What type of custom features do you expect to need?\",\r\n    subtitle: \"Select one.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Low Complexity\",\r\n        subtitle: \"(Informational)\",\r\n        icon: info,\r\n        iconAlt: \"'i' inside a circle\",\r\n        selected: false,\r\n        cost: 500,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Medium Complexity\",\r\n        subtitle: \"(Interactive, Customizable, Realtime)\",\r\n        icon: customized,\r\n        iconAlt: \"two toggle switches\",\r\n        selected: false,\r\n        cost: 2000,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"High Complexity\",\r\n        subtitle: \"(Data Modeling and Computation)\",\r\n        icon: data,\r\n        iconAlt: \"outline of line graph\",\r\n        selected: false,\r\n        cost: 5000,\r\n      },\r\n    ],\r\n    active: false,\r\n  },\r\n  {\r\n    id: 6,\r\n    title: \"How many users do you expect?\",\r\n    subtitle: \"Select one.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"0-10\",\r\n        subtitle: null,\r\n        icon: person,\r\n        iconAlt: \"person outline\",\r\n        selected: false,\r\n        cost: 1,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"10-100\",\r\n        subtitle: null,\r\n        icon: persons,\r\n        iconAlt: \"outline of two people\",\r\n        selected: false,\r\n        cost: 1.25,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"100+\",\r\n        subtitle: null,\r\n        icon: people,\r\n        iconAlt: \"outline of three people\",\r\n        selected: false,\r\n        cost: 1.5,\r\n      },\r\n    ],\r\n    active: false,\r\n  },\r\n];\r\n\r\nconst websiteQuestions = [\r\n  { ...defaultQuestions[0], active: false },\r\n  {\r\n    id: 2,\r\n    title: \"Which type of website are you wanting?\",\r\n    subtitle: \"Select one.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Basic\",\r\n        subtitle: \"(Informational)\",\r\n        icon: info,\r\n        iconAlt: \"person outline\",\r\n        selected: false,\r\n        cost: 1000,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Interactive\",\r\n        subtitle: \"(Users, API's, Messaging)\",\r\n        icon: customized,\r\n        iconAlt: \"outline of two people\",\r\n        selected: false,\r\n        cost: 2500,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"E-Commerce\",\r\n        subtitle: \"(Sales)\",\r\n        icon: globe,\r\n        iconAlt: \"outline of three people\",\r\n        selected: false,\r\n        cost: 5000,\r\n      },\r\n    ],\r\n    active: true,\r\n  },\r\n];\r\n\r\nconst Estimate = (props) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const smaller = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const medium = useMediaQuery(theme.breakpoints.down(\"md\"));\r\n  const smallest = useMediaQuery(theme.breakpoints.down(\"xs\"));\r\n\r\n  const questionsRef = useRef();\r\n\r\n  const [questions, setQuestions] = useState(defaultQuestions);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [nameHelperText, setNameHelperText] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [emailHelperText, setEmailHelperText] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [phoneHelperText, setPhoneHelperText] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const [estimate, setEstimate] = useState(0);\r\n\r\n  const [service, setService] = useState(\"\");\r\n  const [platforms, setPlatforms] = useState([]);\r\n  const [features, setFeatures] = useState([]);\r\n  const [customFeatures, setCustomFeatures] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [users, setUsers] = useState(\"\");\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    message: \"\",\r\n    backgroundColor: \"\",\r\n  });\r\n\r\n  // useEffect(()=>{\r\n  //   if(smallest) questionsRef.current.scrollIntoView({behavior: 'smooth'});\r\n  // }, [smallest])\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: estimateAnimation,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n\r\n  const resetStates = () => {\r\n    setPlatforms([]);\r\n    setFeatures([]);\r\n    setCustomFeatures(\"\");\r\n    setCategory(\"\");\r\n    setUsers(\"\");\r\n    if (smallest) questionsRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    //creating a deep copy of state Questions to keep the state immutable\r\n    const updatedQuestions = cloneDeep(questions);\r\n    //filtering out the currently active question\r\n    const activeQuestion = updatedQuestions.filter(\r\n      (question) => question.active\r\n    );\r\n    //Getting index of active question\r\n    const activeQuestionIndex = activeQuestion[0].id - 1;\r\n    //Getting next question index\r\n    const nextQuestionIndex = activeQuestionIndex + 1;\r\n    //setting active question to false\r\n    updatedQuestions[activeQuestionIndex] = {\r\n      ...activeQuestion[0],\r\n      active: false,\r\n    };\r\n    //setting next question to true\r\n    updatedQuestions[nextQuestionIndex] = {\r\n      ...updatedQuestions[nextQuestionIndex],\r\n      active: true,\r\n    };\r\n    //Finally Update the question structure in state\r\n    setQuestions(updatedQuestions);\r\n    if (smallest) {\r\n      questionsRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  const nextQuestionDisabled = () => {\r\n    //Filter out the currently active question\r\n    const activeQuestion = questions.filter((question) => question.active);\r\n    //Check if active question id is the last id in the questions array and return true\r\n    if (activeQuestion[0].id === questions[questions.length - 1].id) {\r\n      return true;\r\n    }\r\n    //Under all other circumstances we need to enable question navigation\r\n    return false;\r\n  };\r\n\r\n  const previousQuestion = () => {\r\n    //creating a deep copy of state Questions to keep the state immutable\r\n    const updatedQuestions = cloneDeep(questions);\r\n    //filtering out the currently active question\r\n    let activeQuestion = updatedQuestions.filter((question) => question.active);\r\n    //Getting index of active question\r\n    const activeQuestionIndex = activeQuestion[0].id - 1;\r\n    //Getting next question index\r\n    const previousQuestionIndex = activeQuestionIndex - 1;\r\n    //setting active question to false\r\n    updatedQuestions[activeQuestionIndex] = {\r\n      ...activeQuestion[0],\r\n      active: false,\r\n    };\r\n    //setting next question to true\r\n    updatedQuestions[previousQuestionIndex] = {\r\n      ...updatedQuestions[previousQuestionIndex],\r\n      active: true,\r\n    };\r\n    //Finally Update the question structure in state\r\n    setQuestions(updatedQuestions);\r\n    if (smallest) questionsRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n    //if we need to restrict user to select only one type of service\r\n    //its kind of a reset function for question\r\n    //Without this block of code user can still go back n forth between questions even after going back to first question\r\n    // activeQuestion = updatedQuestions.filter(\r\n    //   (question) => question.active\r\n    // );\r\n    // if(activeQuestion[0].title === 'Which service are you interested in?'){\r\n    //   setQuestions(defaultQuestions);\r\n    // }\r\n  };\r\n\r\n  const previousQuestionDisabled = () => {\r\n    //Filter out the currently active question\r\n    const activeQuestion = questions.filter((question) => question.active);\r\n    //Check if active question id is the first id in the questions array and return true\r\n    if (activeQuestion[0].id === questions[0].id) {\r\n      return true;\r\n    }\r\n    //Under all other circumstances we need to enable question navigation\r\n    return false;\r\n  };\r\n\r\n  const handleOptionSelection = (id) => {\r\n    //creating a deep copy of state Questions to keep the state immutable\r\n    const updatedQuestions = cloneDeep(questions);\r\n    //filtering out the active question\r\n    const activeQuestion = updatedQuestions.filter(\r\n      (question) => question.active\r\n    );\r\n    //Getting the index of currently active question\r\n    const activeQuestionIndex = activeQuestion[0].id - 1;\r\n    //Getting the selected option from currently active question using the option id input parameter\r\n    const selectedOption =\r\n      updatedQuestions[activeQuestionIndex].options[id - 1];\r\n    //Getting the previous selected option from currently active question and filter for any other options seleted\r\n    const previouslySelectedOption = activeQuestion[0].options.filter(\r\n      (option) => option.selected\r\n    );\r\n    //switch over active question subtitle to find whether single or multiple questions needed to be selected.\r\n    switch (activeQuestion[0].subtitle) {\r\n      //The case where only one option can be seleted at a time\r\n      case \"Select one.\":\r\n        //Check if there is any already or previously selected option exist\r\n        //if condition is true => toggle the previously selected option\r\n        if (previouslySelectedOption[0]) {\r\n          previouslySelectedOption[0].selected = !previouslySelectedOption[0]\r\n            .selected;\r\n          if (previouslySelectedOption[0] === selectedOption) {\r\n            selectedOption.selected = !selectedOption.selected;\r\n          }\r\n        }\r\n        //if there is no previously selected option then Toggle the options currently selected property\r\n        selectedOption.selected = !selectedOption.selected;\r\n        break;\r\n      default:\r\n        //In all other cases user can select multiple options, so toggle selection\r\n        selectedOption.selected = !selectedOption.selected;\r\n        break;\r\n    }\r\n    //switch over selected option title to find which set of questions should be shown to the user\r\n    switch (selectedOption.title) {\r\n      //if selected option title matches the swtich case => question state is updated to show relevant questions\r\n      case \"Software Development\":\r\n        setQuestions(softwareQuestions);\r\n        setService(selectedOption.title);\r\n        resetStates();\r\n        break;\r\n      case \"App Development\":\r\n        setQuestions(softwareQuestions);\r\n        setService(selectedOption.title);\r\n        resetStates();\r\n        break;\r\n      case \"Website Development\":\r\n        setQuestions(websiteQuestions);\r\n        setService(selectedOption.title);\r\n        resetStates();\r\n        break;\r\n      default:\r\n        //if selected option title doesnt match any switch case then we will simply update the question\r\n        setQuestions(updatedQuestions);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onFieldInputChange = (event) => {\r\n    let valid;\r\n    switch (event.target.id) {\r\n      case \"name\":\r\n        setName(event.target.value);\r\n        if (event.target.value !== \"\") {\r\n          valid = /^[a-z ,.'-]+$/i.test(event.target.value);\r\n          if (!valid) {\r\n            setNameHelperText(\r\n              `Cannot include numbers, brackets and special characters`\r\n            );\r\n          } else {\r\n            setNameHelperText(\"\");\r\n          }\r\n        } else {\r\n          setNameHelperText(\"\");\r\n        }\r\n        break;\r\n      case \"email\":\r\n        setEmail(event.target.value);\r\n        if (event.target.value !== \"\") {\r\n          valid = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(\r\n            event.target.value\r\n          );\r\n          if (!valid) {\r\n            setEmailHelperText(\"Invalid email.\");\r\n          } else {\r\n            setEmailHelperText(\"\");\r\n          }\r\n        } else {\r\n          setEmailHelperText(\"\");\r\n        }\r\n\r\n        break;\r\n      case \"phone\":\r\n        setPhone(event.target.value);\r\n        if (event.target.value !== \"\") {\r\n          valid = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/.test(\r\n            event.target.value\r\n          );\r\n          if (!valid) {\r\n            setPhoneHelperText(\"Invalid Phone Number\");\r\n          } else {\r\n            setPhoneHelperText(\"\");\r\n          }\r\n        } else {\r\n          setPhoneHelperText(\"\");\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const calculateCost = () => {\r\n    //declaring a cost counter\r\n    let cost = 0;\r\n    //Filter out the questions that are answered with at least one option selected\r\n    const selections = questions\r\n      .map((question) => question.options.filter((option) => option.selected))\r\n      .filter((question) => question.length !== 0);\r\n    //aggregating cost from the selected option to the cost counter\r\n    selections.map((options) => options.map((option) => (cost += option.cost)));\r\n    //Note: The question \"How many users do you expect?\" doesnt have a cost\r\n    //It only has a multiplyer as a cost property. So we need to subtract the multiplyer\r\n    //from the cost calculated in the above step\r\n\r\n    //Website Questions have only 2 questions and doesnt have \"How many users do you expect?\"\r\n    if (questions.length > 2) {\r\n      //Filtering out the multiplyer from \"How many users do you expect?\"\r\n      //if user don't choose any option from \"How many users do you expect?\" then\r\n      //userCostMultiplyer should return undefined\r\n      const expectedNumberOfUsers = questions\r\n        .filter(\r\n          (question) => question.title === \"How many users do you expect?\"\r\n        )[0]\r\n        .options.filter((option) => option.selected)[0];\r\n      const usersCostMultiplyer = expectedNumberOfUsers?.cost;\r\n      //if userCostMultiplyer is not undefined subtract multiplyer from cost\r\n      //and multiply the remaining cost with multiplyer\r\n      if (usersCostMultiplyer) {\r\n        cost -= usersCostMultiplyer;\r\n        cost *= usersCostMultiplyer;\r\n        setUsers(expectedNumberOfUsers.title);\r\n      }\r\n    }\r\n    //Finally set the estimated cost state\r\n    setEstimate(cost);\r\n  };\r\n\r\n  const getPlatforms = () => {\r\n    let selectedPlatforms = [];\r\n\r\n    if (questions.length > 2) {\r\n      questions\r\n        .filter(\r\n          (question) =>\r\n            question.title === \"Which platforms do you need supported?\"\r\n        )[0]\r\n        .options.filter((option) => option.selected)\r\n        .map((selectedOption) => selectedPlatforms.push(selectedOption.title));\r\n    }\r\n    setPlatforms(selectedPlatforms);\r\n  };\r\n\r\n  const getFeatures = () => {\r\n    let selectedFeatures = [];\r\n\r\n    if (questions.length > 2) {\r\n      questions\r\n        .filter(\r\n          (question) =>\r\n            question.title === \"Which features do you expect to use?\"\r\n        )\r\n        .map((question) =>\r\n          question.options\r\n            .filter((option) => option.selected)\r\n            .map((selectedOption) =>\r\n              selectedFeatures.push(selectedOption.title)\r\n            )\r\n        );\r\n    }\r\n    setFeatures(selectedFeatures);\r\n  };\r\n\r\n  const getCustomFeatures = () => {\r\n    if (questions.length > 2) {\r\n      const featuresComplexity = questions\r\n        .filter(\r\n          (question) =>\r\n            question.title ===\r\n            \"What type of custom features do you expect to need?\"\r\n        )\r\n        .map((question) =>\r\n          question.options.filter((option) => option.selected)\r\n        )[0][0].title;\r\n\r\n      setCustomFeatures(featuresComplexity);\r\n    }\r\n  };\r\n\r\n  const getCategory = () => {\r\n    if (questions.length === 2) {\r\n      const websiteType = questions\r\n        .filter(\r\n          (question) =>\r\n            question.title === \"Which type of website are you wanting?\"\r\n        )[0]\r\n        .options.filter((option) => option.selected)[0]?.title;\r\n      setCategory(websiteType);\r\n    }\r\n  };\r\n\r\n  const estimateDisabled = () => {\r\n    let disabled = true;\r\n    //Getting an unansweredQuestions List after removing the default question\r\n    const unAnsweredQuestions = questions\r\n      .filter(\r\n        (question) => question.title !== \"Which service are you interested in?\"\r\n      )\r\n      .map((question) => question.options.filter((option) => option.selected))\r\n      .filter((answeredQuestion) => answeredQuestion.length === 0);\r\n    //Check if user has selected any type of service\r\n    if (questions.length >= 2) {\r\n      if (unAnsweredQuestions.length === 0) {\r\n        disabled = false;\r\n      } else if (questions.length > 2 && unAnsweredQuestions.length === 1) {\r\n        if (\r\n          questions\r\n            .filter(\r\n              (question) =>\r\n                question.title !== \"Which features do you expect to use?\" &&\r\n                question.title !== \"Which service are you interested in?\"\r\n            )\r\n            .map((question) =>\r\n              question.options.filter((option) => option.selected)\r\n            )\r\n            .filter((unAnswered) => unAnswered.length === 0).length > 0\r\n        ) {\r\n          disabled = true;\r\n        } else {\r\n          disabled = false;\r\n        }\r\n      }\r\n    } else {\r\n      //if User hasn't selected any type of service than disable estimate\r\n      disabled = true;\r\n    }\r\n    return disabled;\r\n  };\r\n\r\n  const placeRequest = () => {\r\n    setLoading(true);\r\n    axios\r\n      .get(\"https://us-central1-beri-tech.cloudfunctions.net/sendMail\", {\r\n        params: {\r\n          name: name,\r\n          email: email,\r\n          phone: phone,\r\n          message: message,\r\n          total: estimate,\r\n          service: service,\r\n          platforms: platforms,\r\n          features: features,\r\n          customFeatures: customFeatures,\r\n          users: users,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setLoading(false);\r\n        setOpen(false);\r\n        setAlert({\r\n          open: true,\r\n          message: \"Request has been placed successfully.\",\r\n          backgroundColor: \"#4BB543\",\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n        setLoading(false);\r\n        setAlert({\r\n          open: true,\r\n          message: \"Something went wrong! Please try again.\",\r\n          backgroundColor: \"#FF3232\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const placeRequestButtonJSX = (\r\n    <React.Fragment>\r\n      Place Request\r\n      <img src={send} alt=\"airplane\" style={{ marginLeft: \"10px\" }} />\r\n    </React.Fragment>\r\n  );\r\n\r\n  const softwareSelectionsJSX = (\r\n    <Grid container direction=\"column\" style={{ marginBottom: \"2.5em\" }}>\r\n      <Grid\r\n        item\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        style={{ marginBottom: \"1.25em\" }}\r\n      >\r\n        <Grid item xs={2}>\r\n          <img src={check} alt=\"checkmark\" />\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          <Typography variant=\"body1\">\r\n            You want {service}{\" \"}\r\n            {platforms.length > 0\r\n              ? `for ${\r\n                  //if only web application is selected...\r\n                  platforms.indexOf(\"Web Application\") > -1 &&\r\n                  platforms.length === 1\r\n                    ? //then finish sentence here\r\n                      \"a Web Application.\"\r\n                    : //otherwise, if web application and another platform is selected...\r\n                    platforms.indexOf(\"Web Application\") > -1 &&\r\n                      platforms.length === 2\r\n                    ? //then finish the sentence here\r\n                      `a Web Application and an ${platforms[1]}.`\r\n                    : //otherwise, if only one platform is selected which isn't web application...\r\n                    platforms.length === 1\r\n                    ? //then finish the sentence here\r\n                      `an ${platforms[0]}`\r\n                    : //otherwise, if other two options are selected...\r\n                    platforms.length === 2\r\n                    ? //then finish the sentence here\r\n                      \"an iOS Application and an Android Application.\"\r\n                    : //otherwise if all three are selected...\r\n                    platforms.length === 3\r\n                    ? //then finish the sentence here\r\n                      \"a Web Application, an iOS Application, and an Android Application.\"\r\n                    : null\r\n                }`\r\n              : null}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        style={{ marginBottom: \"1.25em\" }}\r\n      >\r\n        <Grid item xs={2}>\r\n          <img src={check} alt=\"checkmark\" />\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          <Typography variant=\"body1\">\r\n            {\" \"}\r\n            {\"with \"}\r\n            {/* if we have features... */}\r\n            {features.length > 0\r\n              ? //...and there's only 1...\r\n                features.length === 1\r\n                ? //then end the sentence here\r\n                  `${features[0]}.`\r\n                : //otherwise, if there are two features...\r\n                features.length === 2\r\n                ? //...then end the sentence here\r\n                  `${features[0]} and ${features[1]}.`\r\n                : //otherwise, if there are three or more features...\r\n                  features\r\n                    //filter out the very last feature...\r\n                    .filter((feature, index) => index !== features.length - 1)\r\n                    //and for those features return their name...\r\n                    .map((feature, index) => (\r\n                      <span key={index}>{`${feature}, `}</span>\r\n                    ))\r\n              : null}\r\n            {features.length > 0 &&\r\n            features.length !== 1 &&\r\n            features.length !== 2\r\n              ? //...and then finally add the last feature with 'and' in front of it\r\n                ` and ${features[features.length - 1]}.`\r\n              : null}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        style={{ marginBottom: \"1.25em\" }}\r\n      >\r\n        <Grid item xs={2}>\r\n          <img src={check} alt=\"checkmark\" />\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          <Typography variant=\"body1\">\r\n            The custom features will be of {customFeatures.toLowerCase()}{\" \"}\r\n            {`, and the project will be used by about ${users} users.`}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n\r\n  const websiteSelectionJSX = (\r\n    <Grid container direction=\"column\" style={{ marginBottom: \"2.5em\" }}>\r\n      <Grid\r\n        item\r\n        container\r\n        direction=\"row\"\r\n        alignItems=\"center\"\r\n        style={{ marginBottom: \"1.25em\" }}\r\n      >\r\n        <Grid item xs={2}>\r\n          <img src={check} alt=\"checkmark\" />\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          <Typography variant=\"body1\">\r\n            You want{\" \"}\r\n            {category === \"Basic\"\r\n              ? \"a Basic Website.\"\r\n              : `an ${category} Website.`}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n\r\n  return (\r\n    <Grid container direction=\"row\" style={{ marginBottom: \"10em\" }}>\r\n      <Grid item container direction=\"column\" md>\r\n        <Grid item className={classes.heading}>\r\n          <Typography variant=\"h2\">Estimate</Typography>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          ref={questionsRef}\r\n          style={{\r\n            marginTop: smaller ? 0 : medium ? \"9em\" : \"7em\",\r\n            marginBottom: smaller ? 0 : \"5em\",\r\n            height: smallest ? \"10em\" : smaller ? \"17.5em\" : \"auto\",\r\n            marginRight: smaller ? \"0\" : \"7.5em\",\r\n            maxWidth: smaller ? \"100%\" : \"40em\",\r\n          }}\r\n        >\r\n          <Lottie options={defaultOptions} height=\"100%\" width=\"100%\" />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item container direction=\"column\" md>\r\n        {questions\r\n          .filter((question) => question.active)\r\n          .map((question, index) => (\r\n            <React.Fragment key={index}>\r\n              <Grid item className={classes.question}>\r\n                <Typography variant=\"h4\" align=\"center\">\r\n                  {question.title}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" align=\"center\" gutterBottom>\r\n                  {question.subtitle}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item container>\r\n                {question.options.map((option, i) => (\r\n                  <React.Fragment key={i}>\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      alignItems=\"center\"\r\n                      //here we converted regular button component to display data in a grid !important styling\r\n                      style={{\r\n                        marginTop: smallest && i !== 0 ? \"4em\" : \"2em\",\r\n                        textTransform: \"none\",\r\n                        display: \"grid\",\r\n                        backgroundColor: option.selected\r\n                          ? theme.palette.common.orange\r\n                          : null,\r\n                        borderRadius: 0,\r\n                      }}\r\n                      component={Button}\r\n                      onClick={() => handleOptionSelection(option.id)}\r\n                      direction=\"column\"\r\n                      sm\r\n                    >\r\n                      <Grid item>\r\n                        <img\r\n                          src={option.icon}\r\n                          alt={option.iconAlt}\r\n                          className={classes.icon}\r\n                        />\r\n                      </Grid>\r\n                      <Grid\r\n                        item\r\n                        style={{ maxWidth: \"10em\", marginTop: \"0.5em\" }}\r\n                      >\r\n                        <Typography variant=\"h6\" align=\"center\">\r\n                          {option.title}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" align=\"center\">\r\n                          {option.subtitle}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </React.Fragment>\r\n                ))}\r\n              </Grid>\r\n            </React.Fragment>\r\n          ))}\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"space-around\"\r\n          style={{ marginTop: \"3em\", marginBottom: \"2.5em\" }}\r\n        >\r\n          <Grid item>\r\n            <IconButton\r\n              className={classes.transparentOnHover}\r\n              onClick={previousQuestion}\r\n              disabled={previousQuestionDisabled()}\r\n            >\r\n              <img\r\n                src={previousQuestionDisabled() ? backArrowDisabled : backArrow}\r\n                alt=\"Previous question\"\r\n              />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton\r\n              className={classes.transparentOnHover}\r\n              onClick={nextQuestion}\r\n              disabled={nextQuestionDisabled()}\r\n            >\r\n              <img\r\n                src={\r\n                  nextQuestionDisabled() ? forwardArrowDisabled : forwardArrow\r\n                }\r\n                alt=\"Next question\"\r\n              />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item align=\"center\" style={{ marginTop: \"3em\" }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            className={classes.estimate}\r\n            disabled={estimateDisabled()}\r\n            onClick={() => {\r\n              setOpen(true);\r\n              calculateCost();\r\n              getCategory();\r\n              getPlatforms();\r\n              getFeatures();\r\n              getCustomFeatures();\r\n            }}\r\n          >\r\n            Get Estimate\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Dialog\r\n        open={open}\r\n        onClose={() => setOpen(false)}\r\n        aria-labelledby=\"estimate-modal-title\"\r\n        fullScreen={smaller ? true : false}\r\n        style={{ zIndex: 1303 }}\r\n        maxWidth={smaller ? \"sm\" : \"lg\"}\r\n      >\r\n        <DialogTitle\r\n          id=\"estimate-modal-title\"\r\n          className={classes.estimateModalHeading}\r\n          disableTypography\r\n        >\r\n          <Typography variant=\"h4\">Estimate</Typography>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Grid container justify=\"space-around\">\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              md={7}\r\n              style={{ maxWidth: \"25em\" }}\r\n            >\r\n              <Grid item style={{ width: \"100%\", marginTop: \"0.5em\" }}>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  id=\"name\"\r\n                  error={nameHelperText.length !== 0}\r\n                  helperText={nameHelperText}\r\n                  value={name}\r\n                  onChange={onFieldInputChange}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item style={{ width: \"100%\", marginTop: \"0.5em\" }}>\r\n                <TextField\r\n                  label=\"Email\"\r\n                  id=\"email\"\r\n                  error={emailHelperText.length !== 0}\r\n                  helperText={emailHelperText}\r\n                  value={email}\r\n                  onChange={onFieldInputChange}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item style={{ width: \"100%\", marginTop: \"0.5em\" }}>\r\n                <TextField\r\n                  label=\"Phone\"\r\n                  id=\"phone\"\r\n                  error={phoneHelperText.length !== 0}\r\n                  helperText={phoneHelperText}\r\n                  value={phone}\r\n                  onChange={onFieldInputChange}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item style={{ width: \"100%\" }}>\r\n                <TextField\r\n                  InputProps={{ disableUnderline: true }}\r\n                  placeholder=\"Tell us about your project here...\"\r\n                  id=\"message\"\r\n                  rows={6}\r\n                  value={message}\r\n                  className={classes.message}\r\n                  style={{ marginTop: \"2em\" }}\r\n                  onChange={(e) => setMessage(e.target.value)}\r\n                  multiline\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item style={{ marginTop: \"1.5em\" }}>\r\n                <Typography variant=\"body1\" align=\"justify\" paragraph>\r\n                  We can create this digital solution for an estimated{\" \"}\r\n                  <span className={classes.specialText}>\r\n                    ${estimate.toFixed(2)}\r\n                  </span>\r\n                  .\r\n                </Typography>\r\n                <Typography variant=\"body1\" align=\"justify\" paragraph>\r\n                  Fill out your name, phone number and email to place your\r\n                  request, and we'll get back to you with details moving forward\r\n                  and a final price.\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              alignItems=\"center\"\r\n              md={5}\r\n              style={{\r\n                paddingLeft: smaller ? 0 : \"2em\",\r\n                maxWidth: \"35em\",\r\n                marginTop: smaller ? \"3em\" : 0,\r\n              }}\r\n            >\r\n              <Grid item>\r\n                {questions.length > 2\r\n                  ? softwareSelectionsJSX\r\n                  : websiteSelectionJSX}\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  className={classes.placeRequest}\r\n                  onClick={placeRequest}\r\n                  disabled={\r\n                    name.length === 0 ||\r\n                    nameHelperText.length !== 0 ||\r\n                    email.length === 0 ||\r\n                    emailHelperText.length !== 0 ||\r\n                    phone.length === 0 ||\r\n                    phoneHelperText.length !== 0 ||\r\n                    message.length === 0\r\n                  }\r\n                >\r\n                  {loading ? (\r\n                    <CircularProgress size={25} />\r\n                  ) : (\r\n                    placeRequestButtonJSX\r\n                  )}\r\n                </Button>\r\n              </Grid>\r\n              <Hidden mdUp>\r\n                <Grid item style={{ marginBottom: \"3em\" }}>\r\n                  <Button\r\n                    variant=\"text\"\r\n                    color=\"secondary\"\r\n                    onClick={() => setOpen(false)}\r\n                    className={classes.transparentOnHover}\r\n                    disableRipple\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </Grid>\r\n              </Hidden>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n      <Snackbar\r\n        open={alert.open}\r\n        message={alert.message}\r\n        ContentProps={{ style: { backgroundColor: alert.backgroundColor } }}\r\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n        onClose={() => setAlert({ ...alert, open: false })}\r\n        autoHideDuration={7000}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Estimate;\r\n","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\ui\\Theme.js",["108"],"import { createMuiTheme } from \"@mui/material/styles\";\r\n\r\nconst blue = \"#166EE9\";\r\nconst orange = \"#fff\";\r\nconst hoverBlue = \"#166EE9\";\r\nconst linkColor = \"#000000\";\r\nconst mygrey = \"#696969\";\r\nconst color =\"#305694\"\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    common: {\r\n      blue: `${blue}`,\r\n      orange: `${orange}`,\r\n      hoverBlue: `${hoverBlue}`,\r\n    },\r\n    type: \"light\",\r\n    primary: {\r\n      main: `${orange}`,\r\n    },\r\n    secondary: {\r\n      main: `${blue}`,\r\n    },\r\n  },\r\n  typography: {\r\n    tab: {\r\n      textTransform: \"none\",\r\n      fontWeight: 700,\r\n      fontFamily: \"Raleway\",\r\n      fontSize: \"1rem\",\r\n    },\r\n    h2: {\r\n      fontFamily: \"Raleway\",\r\n      fontWeight: 700,\r\n      fontSize: \"2.5rem\",\r\n      lineHeight: 1.5,\r\n    },\r\n    h3: {\r\n      fontFamily: \"Raleway\",\r\n      fontWeight: 700,\r\n      fontSize: \"2rem\",\r\n      lineHeight: 1.5,\r\n    },\r\n    h4: {\r\n      fontFamily: \"Raleway\",\r\n      fontSize: \"1.75rem\",\r\n      fontWeight: 700,\r\n    },\r\n    h6: {\r\n      fontFamily: \"Raleway\",\r\n      fontSize: \"1.25rem\",\r\n      fontWeight: 700,\r\n      lineHeight: 1,\r\n    },\r\n    subtitle1: {\r\n      fontSize: \"1.25rem\",\r\n      fontWeight: 400,\r\n      color: `${mygrey}`\r\n    },\r\n    body1: {\r\n      fontSize: \"1.25rem\",\r\n      fontWeight: 400,\r\n      color: `${mygrey}`,\r\n    },\r\n    link: {\r\n      color: `${linkColor}`,\r\n      fontFamily: \"Raleway\",\r\n      fontSize: \"0.9rem\",\r\n      fontWeight: 700,\r\n      textTransform: \"none\",\r\n    },\r\n    estimate: {\r\n      // textTransform: \"none\",\r\n      fontSize: \"1rem\",\r\n     marginLeft: \"180px\",\r\n     \r\n            \r\n\r\n      \r\n    },\r\n    learnButton: {\r\n      color: \"black\",\r\n      // marginLeft: \"20px\",\r\n      marginRight: \"150px\",\r\n      marginTop: \"0.1rem\",\r\n      textTransform: \"none\",\r\n      borderRadius: \"30px\",\r\n      fontFamily: \"Roboto\",\r\n      fontSize: \"1rem\",\r\n      fontWeight: \"bold\",\r\n      \"&:hover\": {\r\n        backgroundColor: `${blue}`,\r\n        color:`${orange}`\r\n      },\r\n    },\r\n  },\r\n  overrides: {\r\n    MuiInputLabel: {\r\n      root: {\r\n        fontSize: \"1rem\"\r\n      }\r\n    },\r\n    MuiInput: {\r\n      root: {\r\n        color:  `${mygrey}`,\r\n        fontWeight: 400,\r\n        fontSize: \"1.25rem\",\r\n      },\r\n      underline: {\r\n        \"&:before\": {\r\n          borderBottom: `2px solid ${orange}`\r\n        },\r\n        \"&:hover:not($disabled):not($focused):not($error):before\": {\r\n          borderBottom: `2px solid ${orange}`\r\n        },\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport default theme;\r\n","C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\ui\\Header.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\ui\\Footer.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\animations\\landinganimation\\data.js",[],["109","110"],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\animations\\documentsAnimation\\data.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\animations\\uxAnimation\\data.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\ui\\ButtonArrow.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\ui\\CallToAction.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\svgToReact\\MobileFooterAdornment.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\svgToReact\\FooterAdornment.js",[],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\TechStack.jsx",["111"],"C:\\Users\\Meeran\\Desktop\\tech-company-website\\src\\components\\Testimonials.jsx",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":12,"column":8,"nodeType":"118","messageId":"119","endLine":12,"endColumn":20},{"ruleId":"116","severity":1,"message":"120","line":50,"column":9,"nodeType":"118","messageId":"119","endLine":50,"endColumn":15},{"ruleId":"116","severity":1,"message":"121","line":23,"column":8,"nodeType":"118","messageId":"119","endLine":23,"endColumn":15},{"ruleId":"116","severity":1,"message":"122","line":8,"column":7,"nodeType":"118","messageId":"119","endLine":8,"endColumn":12},{"ruleId":"112","replacedBy":"123"},{"ruleId":"114","replacedBy":"124"},{"ruleId":"116","severity":1,"message":"125","line":17,"column":8,"nodeType":"118","messageId":"119","endLine":17,"endColumn":14},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-unused-vars","'digitalImage' is defined but never used.","Identifier","unusedVar","'medium' is assigned a value but never used.","'website' is defined but never used.","'color' is assigned a value but never used.",["126"],["127"],"'apache' is defined but never used.","no-global-assign","no-unsafe-negation"]